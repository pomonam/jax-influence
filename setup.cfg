[metadata]
name = jax_influence
version = 0.2.0
description = If influence Functions are the Answer, Then What is the Question?
url = https://github.com/pomonam/jax-influence
author = Juhan Bae
author_email = jbae@cs.toronto.edu
license = Apache 2.0
long_description = file: README.md
long_description_content_type = text/markdown
keywords = influence functions, machine-learning, deep-learning
platforms = any
classifiers =
  Development Status :: 3 - Alpha
  Intended Audience :: Developers
  Intended Audience :: Science/Research
  License :: OSI Approved :: Apache Software License
  Operating System :: OS Independent
  Programming Language :: Python :: 3.8
  Programming Language :: Python :: 3.9
  Programming Language :: Python :: 3.10
  Topic :: Scientific/Engineering :: Artificial Intelligence

[options]
zip_safe = False
packages = find:
include_package_data = True
setup_requires =
  setuptools_scm
# Dependencies of the project:
install_requires =
  absl-py==1.0.0
  torch==1.12.1
  torchvision==0.13.1
  numpy>=1.26.0
  scikit_learn==1.4.0
  isort==5.10.1
  pylint==2.14.5
  pytest==7.1.2
  yapf==0.32.0
python_requires = >=3.8

[options.extras_require]
# JAX CPU
jax_cpu =
  jax==0.4.26
  jaxlib==0.4.26
  dm-haiku==0.0.12

# JAX GPU
jax_gpu =
  jax[cuda]==0.4.26
  jaxlib==0.4.264+cuda11.cudnn82
  dm-haiku==0.0.12

###############################################################################
#                           Linting Configurations                            #
###############################################################################

# yapf configuration
[yapf]
based_on_style = yapf
each_dict_entry_on_separate_line = false
split_all_top_level_comma_separated_values = true
indent_width = 2

# isort configuration
[isort]
profile=google

# pylint configuration
[pylint.MASTER]
persistent=no  # Pickle collected data for later comparisons.
#cache-size=500  # Set the cache size for astng objects.
# Ignore Py3 files
ignore=get_references_web.py,get_references_web_single_group.py
[pylint.REPORTS]
# Set the output format.
# output-format=sorted-text
# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
#files-output=no
# Tells whether to display a full report or only the messages.
reports=no
# Error message template (continued on second line)
msg-template={msg_id}:{line:3} {obj}: {msg} [{symbol}]
[pylint.'MESSAGES CONTROL']
# List of checkers and warnings to enable.
enable=indexing-exception,old-raise-syntax

[pylint.BASIC]
# Required attributes for module, separated by a comma
#required-attributes=
# Regular expression which should only match the name
# of functions or classes which do not require a docstring.
no-docstring-rgx=(__.*__|main)
# Min length in lines of a function that requires a docstring.
docstring-min-length=10
# Regular expression which should only match correct module names. The
# leading underscore is sanctioned for private modules by Google's style
# guide.
#
# There are exceptions to the basic rule (_?[a-z][a-z0-9_]*) to cover
# requirements of Python's module system.
module-rgx=^(_?[a-z][a-z0-9_]*)|__init__$
# Regular expression which should only match correct module level names
const-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$
# Regular expression which should only match correct class attribute
class-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$
# Regular expression which should only match correct class names
class-rgx=^_?[A-Z][a-zA-Z0-9]*$
# Regular expression which should only match correct function names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods.
function-rgx=^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$
# Regular expression which should only match correct method names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods. 'exempt' indicates a name which is
# consistent with all naming styles.
method-rgx=(?x)
  ^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase
         |tearDownTestCase|setupSelf|tearDownClass|_testDatasetSize|setUpClass
         |(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)
     |(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)
     |(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$
# Regular expression which should only match correct instance attribute names
attr-rgx=^_{0,2}[a-z][a-z0-9_]*$
# Regular expression which should only match correct argument names
argument-rgx=^[a-z][a-z0-9_]*$
# Regular expression which should only match correct variable names
variable-rgx=^[a-z][a-z0-9_]*$
# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=^[a-z][a-z0-9_]*$
# Good variable names which should always be accepted, separated by a comma
good-names=main,_
# Bad variable names which should always be refused, separated by a comma
bad-names=
# List of builtins function names that should not be used, separated by a comma
#bad-functions=input,apply,reduce
# List of decorators that define properties, such as abc.abstractproperty.
property-classes=abc.abstractproperty
[pylint.TYPECHECK]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes
# List of decorators that create context managers from functions, such as
# contextlib.contextmanager.
contextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager
[pylint.VARIABLES]
# Tells whether we should check for unused import in __init__ files.
init-import=no
# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=^\*{0,2}(_$|unused_|dummy_)
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=
[pylint.CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp
# "class_" is also a valid for the first argument to a class method.
valid-classmethod-first-arg=cls,class_
[pylint.EXCEPTIONS]
overgeneral-exceptions=StandardError,Exception,BaseException
[pylint.IMPORTS]
# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec,sets
[pylint.FORMAT]
# List of checkers and warnings to disable.
disable=abstract-method,unnecessary-lambda,access-member-before-definition,arguments-differ,assignment-from-no-return,attribute-defined-outside-init,bad-mcs-classmethod-argument,bad-option-value,c-extension-no-member,consider-merging-isinstance,consider-using-dict-comprehension,consider-using-enumerate,consider-using-in,consider-using-set-comprehension,consider-using-ternary,deprecated-method,design,invalid-name,file-ignored,fixme,global-statement,import-error,inconsistent-return-statements,invalid-unary-operand-type,len-as-condition,locally-disabled,locally-enabled,misplaced-comparison-constant,missing-docstring,multiple-imports,no-else-return,no-member,no-name-in-module,no-self-use,no-value-for-parameter,not-an-iterable,not-context-manager,pointless-except,protected-access,redefined-argument-from-local,signature-differs,similarities,simplifiable-if-expression,star-args,super-init-not-called,suppressed-message,too-many-function-args,trailing-comma-tuple,trailing-newlines,ungrouped-imports,unnecessary-pass,unsubscriptable-object,unused-argument,useless-object-inheritance,useless-return,useless-suppression,wrong-import-order,wrong-import-position,unneeded-not,unexpected-keyword-arg,redundant-keyword-arg,unspecified-encoding,logging-fstring-interpolation,consider-using-f-string

# Maximum number of characters on a single line.
max-line-length=120
# Regexp for a line that is allowed to be longer than the limit.
# This "ignore" regex is today composed of several independent parts:
# (1) Long import lines
# (2) URLs in comments or pydocs. Detecting URLs by regex is a hard problem and
#     no amount of tweaking will make a perfect regex AFAICT. This one is a good
#     compromise.
# (3) Constant string literals at the start of files don't need to be broken
#     across lines. Allowing long paths and urls to be on a single
#     line. Also requires that the string not be a triplequoted string.
ignore-long-lines=(?x)
  (^\s*(import|from)\s
   |^\s*(\#\ )?<?(https?|ftp):\/\/[^\s\/$.?#].[^\s]*>?$
   |^[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*("[^"]\S+"|'[^']\S+')
   )
# Maximum number of lines in a module
max-module-lines=99999
indent-string='  '
single-line-if-stmt=y
[pylint.LOGGING]
logging-modules=logging,absl.logging
[pylint.MISCELLANEOUS]
indent-after-paren=4
